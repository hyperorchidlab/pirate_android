package com.hop.pirate.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hop.pirate.model.bean.MinePoolBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINE_POOL_BEAN".
*/
public class MinePoolBeanDao extends AbstractDao<MinePoolBean, Void> {

    public static final String TABLENAME = "MINE_POOL_BEAN";

    /**
     * Properties of entity MinePoolBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property MortgageNumber = new Property(1, double.class, "mortgageNumber", false, "MORTGAGE_NUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property WebsiteAddress = new Property(3, String.class, "websiteAddress", false, "WEBSITE_ADDRESS");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property UserNumber = new Property(5, int.class, "userNumber", false, "USER_NUMBER");
        public final static Property MineMachineNumber = new Property(6, int.class, "mineMachineNumber", false, "MINE_MACHINE_NUMBER");
        public final static Property IsSelected = new Property(7, boolean.class, "isSelected", false, "IS_SELECTED");
    }


    public MinePoolBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MinePoolBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINE_POOL_BEAN\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"MORTGAGE_NUMBER\" REAL NOT NULL ," + // 1: mortgageNumber
                "\"NAME\" TEXT," + // 2: name
                "\"WEBSITE_ADDRESS\" TEXT," + // 3: websiteAddress
                "\"EMAIL\" TEXT," + // 4: email
                "\"USER_NUMBER\" INTEGER NOT NULL ," + // 5: userNumber
                "\"MINE_MACHINE_NUMBER\" INTEGER NOT NULL ," + // 6: mineMachineNumber
                "\"IS_SELECTED\" INTEGER NOT NULL );"); // 7: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINE_POOL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MinePoolBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
        stmt.bindDouble(2, entity.getMortgageNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String websiteAddress = entity.getWebsiteAddress();
        if (websiteAddress != null) {
            stmt.bindString(4, websiteAddress);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
        stmt.bindLong(6, entity.getUserNumber());
        stmt.bindLong(7, entity.getMineMachineNumber());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MinePoolBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
        stmt.bindDouble(2, entity.getMortgageNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String websiteAddress = entity.getWebsiteAddress();
        if (websiteAddress != null) {
            stmt.bindString(4, websiteAddress);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
        stmt.bindLong(6, entity.getUserNumber());
        stmt.bindLong(7, entity.getMineMachineNumber());
        stmt.bindLong(8, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MinePoolBean readEntity(Cursor cursor, int offset) {
        MinePoolBean entity = new MinePoolBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.getDouble(offset + 1), // mortgageNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // websiteAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.getInt(offset + 5), // userNumber
            cursor.getInt(offset + 6), // mineMachineNumber
            cursor.getShort(offset + 7) != 0 // isSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MinePoolBean entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMortgageNumber(cursor.getDouble(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWebsiteAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserNumber(cursor.getInt(offset + 5));
        entity.setMineMachineNumber(cursor.getInt(offset + 6));
        entity.setIsSelected(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MinePoolBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MinePoolBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(MinePoolBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
