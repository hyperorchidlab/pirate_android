package com.hop.pirate.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hop.pirate.model.bean.MinerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINER_BEAN".
*/
public class MinerBeanDao extends AbstractDao<MinerBean, Long> {

    public static final String TABLENAME = "MINER_BEAN";

    /**
     * Properties of entity MinerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MID = new Property(1, String.class, "MID", false, "MID");
        public final static Property Zone = new Property(2, String.class, "zone", false, "ZONE");
        public final static Property Time = new Property(3, double.class, "time", false, "TIME");
        public final static Property IP = new Property(4, String.class, "IP", false, "IP");
        public final static Property IsSelected = new Property(5, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property MinerPoolAdd = new Property(6, String.class, "minerPoolAdd", false, "MINER_POOL_ADD");
    }


    public MinerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MinerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MID\" TEXT," + // 1: MID
                "\"ZONE\" TEXT," + // 2: zone
                "\"TIME\" REAL NOT NULL ," + // 3: time
                "\"IP\" TEXT," + // 4: IP
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 5: isSelected
                "\"MINER_POOL_ADD\" TEXT);"); // 6: minerPoolAdd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MinerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MID = entity.getMID();
        if (MID != null) {
            stmt.bindString(2, MID);
        }
 
        String zone = entity.getZone();
        if (zone != null) {
            stmt.bindString(3, zone);
        }
        stmt.bindDouble(4, entity.getTime());
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(5, IP);
        }
        stmt.bindLong(6, entity.getIsSelected() ? 1L: 0L);
 
        String minerPoolAdd = entity.getMinerPoolAdd();
        if (minerPoolAdd != null) {
            stmt.bindString(7, minerPoolAdd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MinerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MID = entity.getMID();
        if (MID != null) {
            stmt.bindString(2, MID);
        }
 
        String zone = entity.getZone();
        if (zone != null) {
            stmt.bindString(3, zone);
        }
        stmt.bindDouble(4, entity.getTime());
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(5, IP);
        }
        stmt.bindLong(6, entity.getIsSelected() ? 1L: 0L);
 
        String minerPoolAdd = entity.getMinerPoolAdd();
        if (minerPoolAdd != null) {
            stmt.bindString(7, minerPoolAdd);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MinerBean readEntity(Cursor cursor, int offset) {
        MinerBean entity = new MinerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zone
            cursor.getDouble(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // IP
            cursor.getShort(offset + 5) != 0, // isSelected
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // minerPoolAdd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MinerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getDouble(offset + 3));
        entity.setIP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSelected(cursor.getShort(offset + 5) != 0);
        entity.setMinerPoolAdd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MinerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MinerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MinerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
