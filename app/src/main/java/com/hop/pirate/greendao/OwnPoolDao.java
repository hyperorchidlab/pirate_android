package com.hop.pirate.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hop.pirate.model.bean.OwnPool;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "OWN_POOL".
 */
public class OwnPoolDao extends AbstractDao<OwnPool, Long> {

    public static final String TABLENAME = "OWN_POOL";

    /**
     * Properties of entity OwnPool.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property MortgageNumber = new Property(4, double.class, "mortgageNumber", false, "MORTGAGE_NUMBER");
        public final static Property WebsiteAddress = new Property(5, String.class, "websiteAddress", false, "WEBSITE_ADDRESS");
    }


    public OwnPoolDao(DaoConfig config) {
        super(config);
    }

    public OwnPoolDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"OWN_POOL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"NAME\" TEXT," + // 2: name
                "\"EMAIL\" TEXT," + // 3: email
                "\"MORTGAGE_NUMBER\" REAL NOT NULL ," + // 4: mortgageNumber
                "\"WEBSITE_ADDRESS\" TEXT);"); // 5: websiteAddress
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OWN_POOL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OwnPool entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindDouble(5, entity.getMortgageNumber());

        String websiteAddress = entity.getWebsiteAddress();
        if (websiteAddress != null) {
            stmt.bindString(6, websiteAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OwnPool entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindDouble(5, entity.getMortgageNumber());

        String websiteAddress = entity.getWebsiteAddress();
        if (websiteAddress != null) {
            stmt.bindString(6, websiteAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public OwnPool readEntity(Cursor cursor, int offset) {
        OwnPool entity = new OwnPool( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
                cursor.getDouble(offset + 4), // mortgageNumber
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // websiteAddress
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, OwnPool entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMortgageNumber(cursor.getDouble(offset + 4));
        entity.setWebsiteAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    @Override
    protected final Long updateKeyAfterInsert(OwnPool entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(OwnPool entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OwnPool entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
