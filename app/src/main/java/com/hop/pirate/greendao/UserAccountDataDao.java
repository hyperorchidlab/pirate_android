package com.hop.pirate.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hop.pirate.model.bean.UserAccountData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ACCOUNT_DATA".
*/
public class UserAccountDataDao extends AbstractDao<UserAccountData, Void> {

    public static final String TABLENAME = "USER_ACCOUNT_DATA";

    /**
     * Properties of entity UserAccountData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User = new Property(0, String.class, "user", false, "USER");
        public final static Property Pool = new Property(1, String.class, "pool", false, "POOL");
        public final static Property InRecharge = new Property(2, double.class, "inRecharge", false, "IN_RECHARGE");
        public final static Property Expire = new Property(3, String.class, "expire", false, "EXPIRE");
        public final static Property Nonce = new Property(4, int.class, "nonce", false, "NONCE");
        public final static Property Token = new Property(5, double.class, "token", false, "TOKEN");
        public final static Property Packets = new Property(6, double.class, "packets", false, "PACKETS");
        public final static Property Epoch = new Property(7, int.class, "epoch", false, "EPOCH");
        public final static Property Credit = new Property(8, double.class, "credit", false, "CREDIT");
        public final static Property MicroNonce = new Property(9, int.class, "microNonce", false, "MICRO_NONCE");
    }


    public UserAccountDataDao(DaoConfig config) {
        super(config);
    }
    
    public UserAccountDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ACCOUNT_DATA\" (" + //
                "\"USER\" TEXT," + // 0: user
                "\"POOL\" TEXT," + // 1: pool
                "\"IN_RECHARGE\" REAL NOT NULL ," + // 2: inRecharge
                "\"EXPIRE\" TEXT," + // 3: expire
                "\"NONCE\" INTEGER NOT NULL ," + // 4: nonce
                "\"TOKEN\" REAL NOT NULL ," + // 5: token
                "\"PACKETS\" REAL NOT NULL ," + // 6: packets
                "\"EPOCH\" INTEGER NOT NULL ," + // 7: epoch
                "\"CREDIT\" REAL NOT NULL ," + // 8: credit
                "\"MICRO_NONCE\" INTEGER NOT NULL );"); // 9: microNonce
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ACCOUNT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAccountData entity) {
        stmt.clearBindings();
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(1, user);
        }
 
        String pool = entity.getPool();
        if (pool != null) {
            stmt.bindString(2, pool);
        }
        stmt.bindDouble(3, entity.getInRecharge());
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(4, expire);
        }
        stmt.bindLong(5, entity.getNonce());
        stmt.bindDouble(6, entity.getToken());
        stmt.bindDouble(7, entity.getPackets());
        stmt.bindLong(8, entity.getEpoch());
        stmt.bindDouble(9, entity.getCredit());
        stmt.bindLong(10, entity.getMicroNonce());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAccountData entity) {
        stmt.clearBindings();
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(1, user);
        }
 
        String pool = entity.getPool();
        if (pool != null) {
            stmt.bindString(2, pool);
        }
        stmt.bindDouble(3, entity.getInRecharge());
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(4, expire);
        }
        stmt.bindLong(5, entity.getNonce());
        stmt.bindDouble(6, entity.getToken());
        stmt.bindDouble(7, entity.getPackets());
        stmt.bindLong(8, entity.getEpoch());
        stmt.bindDouble(9, entity.getCredit());
        stmt.bindLong(10, entity.getMicroNonce());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserAccountData readEntity(Cursor cursor, int offset) {
        UserAccountData entity = new UserAccountData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pool
            cursor.getDouble(offset + 2), // inRecharge
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expire
            cursor.getInt(offset + 4), // nonce
            cursor.getDouble(offset + 5), // token
            cursor.getDouble(offset + 6), // packets
            cursor.getInt(offset + 7), // epoch
            cursor.getDouble(offset + 8), // credit
            cursor.getInt(offset + 9) // microNonce
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAccountData entity, int offset) {
        entity.setUser(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPool(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInRecharge(cursor.getDouble(offset + 2));
        entity.setExpire(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNonce(cursor.getInt(offset + 4));
        entity.setToken(cursor.getDouble(offset + 5));
        entity.setPackets(cursor.getDouble(offset + 6));
        entity.setEpoch(cursor.getInt(offset + 7));
        entity.setCredit(cursor.getDouble(offset + 8));
        entity.setMicroNonce(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserAccountData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserAccountData entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserAccountData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
