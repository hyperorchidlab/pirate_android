package com.hop.pirate.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hop.pirate.model.bean.WalletBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WALLET_BEAN".
 */
public class WalletBeanDao extends AbstractDao<WalletBean, Long> {

    public static final String TABLENAME = "WALLET_BEAN";

    /**
     * Properties of entity WalletBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Main = new Property(1, String.class, "Main", false, "MAIN");
        public final static Property Sub = new Property(2, String.class, "Sub", false, "SUB");
        public final static Property Eth = new Property(3, double.class, "Eth", false, "ETH");
        public final static Property Hop = new Property(4, double.class, "Hop", false, "HOP");
        public final static Property Approved = new Property(5, double.class, "Approved", false, "APPROVED");
        public final static Property IsOpen = new Property(6, boolean.class, "IsOpen", false, "IS_OPEN");
    }


    public WalletBeanDao(DaoConfig config) {
        super(config);
    }

    public WalletBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAIN\" TEXT," + // 1: Main
                "\"SUB\" TEXT," + // 2: Sub
                "\"ETH\" REAL NOT NULL ," + // 3: Eth
                "\"HOP\" REAL NOT NULL ," + // 4: Hop
                "\"APPROVED\" REAL NOT NULL ," + // 5: Approved
                "\"IS_OPEN\" INTEGER NOT NULL );"); // 6: IsOpen
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String Main = entity.getMain();
        if (Main != null) {
            stmt.bindString(2, Main);
        }

        String Sub = entity.getSub();
        if (Sub != null) {
            stmt.bindString(3, Sub);
        }
        stmt.bindDouble(4, entity.getEth());
        stmt.bindDouble(5, entity.getHop());
        stmt.bindDouble(6, entity.getApproved());
        stmt.bindLong(7, entity.getIsOpen() ? 1L : 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String Main = entity.getMain();
        if (Main != null) {
            stmt.bindString(2, Main);
        }

        String Sub = entity.getSub();
        if (Sub != null) {
            stmt.bindString(3, Sub);
        }
        stmt.bindDouble(4, entity.getEth());
        stmt.bindDouble(5, entity.getHop());
        stmt.bindDouble(6, entity.getApproved());
        stmt.bindLong(7, entity.getIsOpen() ? 1L : 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public WalletBean readEntity(Cursor cursor, int offset) {
        WalletBean entity = new WalletBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Main
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Sub
                cursor.getDouble(offset + 3), // Eth
                cursor.getDouble(offset + 4), // Hop
                cursor.getDouble(offset + 5), // Approved
                cursor.getShort(offset + 6) != 0 // IsOpen
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, WalletBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMain(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSub(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEth(cursor.getDouble(offset + 3));
        entity.setHop(cursor.getDouble(offset + 4));
        entity.setApproved(cursor.getDouble(offset + 5));
        entity.setIsOpen(cursor.getShort(offset + 6) != 0);
    }

    @Override
    protected final Long updateKeyAfterInsert(WalletBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(WalletBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
